This file contains test cases for a function that divides a matrix
by a given integer or floating pointing number.

>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, "nm")
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix = []
>>> matrix_divided(matrix, 3)
[]

>>> matrix = [[]]
>>> matrix_divided(matrix, 3)
[[]]

>>> matrix = [
... [3, 5, 8],
... 7,
... [4, 1, 9]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
... [1, 5, 6],
... ['l', 8, 9]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
... [8, 7, 4],
... [8, 7]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix = [
... [8, 7, 4],
... [8, 7, 4]
... ]
>>> matrix_divided(matrix, -3)
[[-2.67, -2.33, -1.33], [-2.67, -2.33, -1.33]]
